@page "/Jugador/Edit/{JugadorId:int}"

@rendermode InteractiveServer
@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager

<PageTitle>Modificar Jugador</PageTitle>
<EditForm Model="Jugador" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombres"></InputText>
                    <ValidationMessage For="(() => Jugador.Nombres)" />
                </div>
                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Partida"></InputNumber>
                    <ValidationMessage For="(() => Jugador.Partida)" />
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Jugador/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores Jugador { get; set; } = new Jugadores();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Jugador = await jugadoresService.Buscar(JugadorId);
    }

    public async Task Modificar()
    {
        var creado = await jugadoresService.Guardar(Jugador);

        if (creado)
        {
            Mensaje = "Se ha modificado correctamente";
        }
        else
        {
            Mensaje = "No se ha podido modificar correctamente";
        }
    }

    private async Task Eliminar()
    {
        var eliminado = await jugadoresService.Eliminar(Jugador.JugadorId);

        if (eliminado)
        {
            Mensaje = "Se ha eliminado correctamente";
            navigationManager.NavigateTo("/Jugador/Index");
        }
        else
        {
            Mensaje = "No se ha podido eliminar correctamente";
        }
    }
}
